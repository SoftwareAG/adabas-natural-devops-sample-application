* >Natural Source Header 000000
* :Mode S
* :CP
* <Natural Source Header
/** <h1>Program NCINMAPP.</h1>
/** <p>Natural Course - Example Program</p>
/** <p>Contents:</p>
/**     <ul type="square">
/**         <li>INPUT USING MAP Statement</li>
/**     </ul>
/** :author Eddie Morgenrood
DEFINE DATA LOCAL
  USING NCDEMAPL
LOCAL
/*
1 MAPFIELDS
  2 #CR-ED (A013)
  2 #CR-ET (A007)
  2 #CR-FROMH (A020)
  2 #CR-ID (N08.0)
  2  #CR-ID-CONTROL (C)
  2 #CR-ID-IO (N08.0)
  2 #CR-P1W (A020)
  2 #CR-P2W (A020)
  2 #CR-P3W (A020)
  2 #CR-SD (A013)
  2 #CR-ST (A007)
  2 #CR-STATUS (A020)
  2 #CR-TOH (A020)
  2 #CR-YACHT-NAME (A020)
/*
1 #INFO-MESSAGE (A80)
1 #IN-ERRNR  (N7)
1 #IN-ERRPRG (A8)
1 #IN-ERRLINE (N4)
1 #ERR-TXT (A50)
/*
/*
LOCAL                    /* variables for user exit USR0020N 
01 PARM-AREA             /* Parameters for CALLNAT
02 TYPE         (A01)   INIT <'N'> /* 'U' or 'N' 
  02 APPLICATION  (A08)              /* Must not be blank for type = 'U'
  02 ERROR-NUMBER (N04)              /* 1 thru 9999
02 LANG-NUMB    (A01)  INIT <'1'>  /* Language number 
  02 REDEFINE LANG-NUMB
    03 LANG-NUMB-I (I1)
  02 RESPONSE     (N04)   /* Error during execution of USR0020N
01 RETURN-AREA            /* Contains the message texts
  02 S-FOUND      (L)   INIT <FALSE>  /*  TRUE = 'Short text found'
  02 L-FOUND      (L)   INIT <FALSE>  /*  TRUE = 'Long text found'
  02 SHORT-TEXT   (A65)
  02 LONG-TEXT    (A78/01:20)
END-DEFINE
/*
FORMAT LS=100
/*
IF *DATA > 0
/*   
  INPUT #IN-ERRNR #IN-ERRPRG #IN-ERRLINE
  MOVE  #IN-ERRNR TO PARM-AREA.ERROR-NUMBER
  CALLNAT 'USR0020N' PARM-AREA RETURN-AREA
  MOVE RETURN-AREA.SHORT-TEXT TO  #ERR-TXT
  COMPRESS 
    'Error:' #ERR-TXT '(' #IN-ERRNR ','
    #IN-ERRPRG ','#IN-ERRLINE ')'
    INTO #INFO-MESSAGE LEAVING NO
  RELEASE STACK
/*
ELSE
  MOVE 'Please enter Id to show cruise data' TO #INFO-MESSAGE
END-IF
/*
ON ERROR
  BACKOUT TRANSACTION
  MOVE *ERROR-NR   TO #IN-ERRNR
  MOVE *PROGRAM    TO #IN-ERRPRG
  MOVE *ERROR-LINE TO #IN-ERRLINE
  STACK TOP DATA #IN-ERRNR #IN-ERRPRG #IN-ERRLINE
  STACK TOP COMMAND 'NCINMAPP'
  STOP
ESCAPE ROUTINE
END-ERROR
/*
SET KEY ALL
SET KEY PF1=HELP PF2=ON PF3=ON
SET CONTROL 'MT'
/*
/*
INPUT WITH TEXT #INFO-MESSAGE
  MARK *#CR-ID-IO  USING MAP  'NCDEMAPM'
/*
DECIDE ON FIRST VALUE OF *PF-KEY
  VALUE 'PF2' PERFORM SUB-FIND-CRUISE
    REINPUT FULL 'OK - Cruise shown for Id' MARK *#CR-ID-IO
  VALUE 'PF3' STOP
  NONE  REINPUT 'Sorry - Function key not allocated'
END-DECIDE
/*
/*
DEFINE SUBROUTINE SUB-FIND-CRUISE
FIND NCCRUISE CRUISE-ID = #CR-ID-IO
  IF NO RECORDS FOUND
    RESET MAPFIELDS
    REINPUT FULL 'Sorry - no Cruise found for Id' MARK *#CR-ID-IO
  END-NOREC
/* provoke Error
/*  COMPUTE NCCRUISE.CRUISE-ID = NCCRUISE.CRUISE-ID / 0
  MOVE NCCRUISE.CRUISE-ID             TO #CR-ID
  MOVE NCCRUISE.CRUISE-STATUS         TO #CR-STATUS
  MOVE EDITED NCCRUISE.START-DATE (EM=9999'-'99'-'99) TO #CR-SD
  COMPRESS NCCRUISE.START-TIME   'h'  INTO #CR-ST
  MOVE EDITED NCCRUISE.END-DATE  (EM=9999'-'99'-'99)  TO #CR-ED
  COMPRESS NCCRUISE.END-TIME 'h'      INTO #CR-ET
/*
  MOVE NCCRUISE.START-HARBOR          TO #CR-FROMH
  MOVE NCCRUISE.DESTINATION-HARBOR    TO #CR-TOH
/*
  MOVE EDITED NCCRUISE.PRICE-1W  (EM=*EUR' 'ZZZZ9.99)  TO #CR-P1W
  MOVE EDITED NCCRUISE.PRICE-2W  (EM=*EUR' 'ZZZZ9.99)  TO #CR-P2W
  MOVE EDITED NCCRUISE.PRICE-3W  (EM=*EUR' 'ZZZZ9.99)  TO #CR-P3W

/*
  DECIDE ON FIRST VALUE OF #CR-STATUS
    VALUE '0'  MOVE 'removed'    TO #CR-STATUS
    VALUE '1'  MOVE 'planned'    TO #CR-STATUS
    VALUE '2'  MOVE 'available'  TO #CR-STATUS
    VALUE '3'  MOVE 'sold'       TO #CR-STATUS
    NONE
      MOVE 'unknown' TO #CR-STATUS
  END-DECIDE

/*
  FIND NCYACHT YACHT-ID = NCCRUISE.ID-YACHT
    MOVE YACHT-NAME TO #CR-YACHT-NAME
  END-FIND
/*
END-FIND
END-SUBROUTINE
/*
END
